import { Meta, Canvas, Story, Subtitle } from '@storybook/blocks';
import TreeStory from './tree-story';
import { Paragraph, RelatedArticles } from '../../../';
import Prism from 'prismjs';
import * as TreeStories from './tree.stories';

<Meta of={TreeStories} />

# Tree

<Subtitle>for rendering parent child relationships</Subtitle>

Tree structures are most commonly used in folder or menu components where we need to expand and collapse nodes.

A [tree is a type of graph](https://www.javatpoint.com/tree-vs-graph-data-structure), and we need to traverse the tree to discover nodes of interest.

### Binary Search Tree

In BST, the each node will either have 2 or 0 children. A node with zero children is a leaf node.

<pre>
  <code className="language-javascript">
    {`
        type BinarySearchTree = {
          value: number;
          left: BinarySearchTree | null;
          right: BinarySearchTree | null;
        }

        // 1 node example
        const oneNodeBST: BinarySearchTree = {value: 10, left: null, right: null }

        // 2 children example
        const twoChildrenNodeBST: BinarySearchTree = {value: 10, 
                                                      left: {value: 5, left: null, right: null }, 
                                                      right: {value: 8, left: null, right: null }}

        search(element){   
          if(this.val === element) {
            return true
          } else if(this.val > element && this.left){
            return this.left.search(element)
          } else if(this.val < element && this.right) {
            return this.right.search(element)
          }
          return false
        }

        `}
  </code>
</pre>

### Depth First Search

In DFS, we start at the root and go down a side until we exhaust all nodes and then backtracks to the next path until we find the node.

<pre>
  <code className="language-javascript">
    {`
        // DFS
        `}
  </code>
</pre>

### Breadth First Search

In BFS, we visit all the nodes in the first level before proceeding to the next level. The search widens as it advances levels.

<Canvas>
  <Story of={TreeStories.SimpleTree} />

  <Story of={TreeStories.RecursiveTree} />
</Canvas>

<RelatedArticles
  articles={[
    { id: 0, title: 'How to traverse a tree using JavaScript', url: 'https://levelup.gitconnected.com/how-to-traverse-a-tree-using-javascript-c9a79826e819' },
        { id: 0, title: 'Implement Binary Search Tree in JavaScript', url: 'https://medium.com/swlh/implement-binary-search-tree-in-javascript-897dcbcc5616' },
  ]}
/>

* https://jrsinclair.com/articles/2019/functional-js-traversing-trees-with-recursive-reduce/
* https://dev.to/apetrides/js-recursion-through-a-file-tree-4l55
* https://arxiv.org/abs/2308.04512
* https://www.flowmapp.com/
